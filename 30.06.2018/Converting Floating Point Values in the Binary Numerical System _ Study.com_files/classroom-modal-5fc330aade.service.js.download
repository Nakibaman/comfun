var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define(["require", "exports", "angularDependency", "angular/modal/study-modal.service", "classroom/teacher/classroom-invite-modal.controller", "classroom/teacher/classroom/classroom-modal.controller", "classroom/teacher/classroom/google-classroom-import-modal.controller", "lib/toastr", "angularDependency", "angular/modal/study-modal.service", "classroom/teacher/classroom-invite-modal.controller", "classroom/teacher/classroom/classroom-modal.controller", "classroom/teacher/classroom/google-classroom-import-modal.controller", "classroom/teacher/classroom/google-classroom.service", "compatibility/promise-polyfill", "lib/toastr", "util/support-article-link.directive"], function (require, exports, angular, study_modal_service_1, classroom_invite_modal_controller_1, classroom_modal_controller_1, google_classroom_import_modal_controller_1, toastr) {
    "use strict";
    exports.__esModule = true;
    var module = angular.module("classroom-modal.service", [
        "classroom.service", "classroom-modal.controller", "google-classroom.service", "study.modal", "support-article-link.directive"
    ]);
    var ClassroomModalService = (function () {
        function ClassroomModalService($q, classroomService, studyModalService, CLASSROOM_NAME_MIN_LENGTH, CLASSROOM_NAME_MAX_LENGTH) {
            this.googleLoginService = null;
            this.$q = $q;
            this.studyModalService = studyModalService;
            this.classroomService = classroomService;
            this.CLASSROOM_NAME_MIN_LENGTH = CLASSROOM_NAME_MIN_LENGTH;
            this.CLASSROOM_NAME_MAX_LENGTH = CLASSROOM_NAME_MAX_LENGTH;
        }
        ClassroomModalService.prototype.initGoogleLoginService = function () {
            if (this.googleLoginService === null) {
                this.loadGoogleLoginService()
                    .then(function (googleLoginService) {
                    this.googleLoginService = googleLoginService;
                }.bind(this));
            }
        };
        ClassroomModalService.prototype.openImportGoogleClassroomModal = function () {
            var deferred = this.$q.defer();
            if (!this.googleLoginService || !this.googleLoginService.isInitialized()) {
                this.handleError("Google API uninitialized. Try again later.");
                deferred.reject("Google API uninitialized. Try again later.");
                if (this.googleLoginService) {
                    this.googleLoginService.loadAndInitAuth();
                }
            }
            else {
                this.googleLoginService.addClassroomGrantsToScope()
                    .then(function (authCode) {
                    var classroom = {};
                    var modalSettings = {
                        controller: google_classroom_import_modal_controller_1.GoogleClassroomImportModalController,
                        controllerAs: "classImportModalController",
                        templateUrl: "/templates/classrooms/teacher/modal/google-classroom-import-modal.tpl",
                        size: study_modal_service_1.StudyModalService.SIZE_MEDIUM,
                        windowClass: "classroomModal",
                        resolve: {
                            classroomToEdit: classroom,
                            authCode: function () { return authCode; }
                        }
                    };
                    var modalInstance = this.studyModalService.openModalByConfig(modalSettings);
                    modalInstance.result
                        .then(function () {
                        deferred.resolve(classroom);
                    })["catch"](function () {
                        deferred.reject("import modal closed");
                    });
                }.bind(this))["catch"](function (error) {
                    var shouldShowError = error.indexOf("popup_closed_by_user") === -1;
                    if (shouldShowError) {
                        this.handleError(error);
                        deferred.reject(error);
                    }
                }.bind(this));
            }
            return deferred.promise;
        };
        ClassroomModalService.prototype.loadGoogleLoginService = function () {
            return __awaiter(this, void 0, void 0, function () {
                var googleLoginServiceModule, googleLoginService;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, new Promise(function (resolve_1, reject_1) { require(["authentication/google-login.service"], resolve_1, reject_1); })];
                        case 1:
                            googleLoginServiceModule = _a.sent();
                            googleLoginService = new googleLoginServiceModule.GoogleLoginService();
                            return [2, googleLoginService];
                    }
                });
            });
        };
        ClassroomModalService.prototype.openCreateOrUpdateClassroomModal = function (classroom) {
            var isCreatingNewClassroom = (classroom == null);
            var temporaryClassroom = angular.extend({}, classroom);
            var modalSettings = {
                controller: classroom_modal_controller_1.ClassroomModalController,
                controllerAs: "classroomModalController",
                templateUrl: "/templates/classrooms/teacher/modal/create-or-update-classroom-modal.tpl",
                size: study_modal_service_1.StudyModalService.SIZE_SMALL,
                windowClass: "classroomModal",
                resolve: {
                    CLASSROOM_NAME_MAX_LENGTH: this.CLASSROOM_NAME_MAX_LENGTH,
                    CLASSROOM_NAME_MIN_LENGTH: this.CLASSROOM_NAME_MIN_LENGTH,
                    classroomToEdit: temporaryClassroom,
                    isCreatingNewClassroom: isCreatingNewClassroom
                }
            };
            var modalInstance = this.studyModalService.openModalByConfig(modalSettings);
            return modalInstance.result.then(function () {
                if (classroom) {
                    angular.extend(classroom, temporaryClassroom);
                }
                else {
                    classroom = temporaryClassroom;
                }
                if (isCreatingNewClassroom) {
                    return this.createClassroom(classroom);
                }
                else {
                    return this.updateClassroom(classroom);
                }
            }.bind(this));
        };
        ;
        ClassroomModalService.prototype.createClassroom = function (classroom) {
            return this.classroomService.createClassroom(classroom)
                .then(function (classroom) {
                this.showSuccessMessage("You have successfully created your classroom!");
                return classroom;
            }.bind(this))["catch"](this.handleError);
        };
        ;
        ClassroomModalService.prototype.updateClassroom = function (classroom) {
            return this.classroomService.updateClassroom(classroom)
                .then(function () {
                this.showSuccessMessage("Your classroom has been updated.");
                return classroom;
            }.bind(this))["catch"](this.handleError);
        };
        ;
        ClassroomModalService.prototype.openDeleteClassroomModal = function (classroom) {
            var modalController = ["$scope", function ($scope) {
                    $scope.classroom = classroom;
                }];
            var modalInstance = this.studyModalService.openModal(modalController, this.studyModalService.SIZE_SMALL, '/templates/classrooms/teacher/modal/delete-classroom-modal.tpl');
            modalInstance.result.then(function () {
                this.deleteClassroom(classroom);
            }.bind(this));
            return modalInstance.result;
        };
        ;
        ClassroomModalService.prototype.openAddStudentModal = function (classroom, canChangeClassroom) {
            var modalController = ["$scope", function ($scope) {
                    $scope.classroom = classroom;
                    $scope.canChangeClassroom = canChangeClassroom;
                }.bind(this)];
            var modalInstance = this.studyModalService.openModal(modalController, this.studyModalService.SIZE_MEDIUM, '/templates/classrooms/teacher/modal/add-student-modal.tpl', "inviteStudentModal");
        };
        ClassroomModalService.prototype.deleteClassroom = function (classroom) {
            this.classroomService.deleteClassroom(classroom)
                .then(this.showSuccessMessage.bind(this, "Your classroom has been deleted."))["catch"](this.handleError);
        };
        ;
        ClassroomModalService.prototype.showSuccessMessage = function (message) {
            toastr.success(message, "Success", {
                positionClass: 'toast-top-center'
            });
        };
        ;
        ClassroomModalService.prototype.showWarningMessage = function (message) {
            if (message) {
                toastr.warning(message, "Warning", {
                    positionClass: 'toast-top-center'
                });
            }
        };
        ;
        ClassroomModalService.prototype.handleError = function (errorMessage) {
            if (errorMessage) {
                toastr.error(errorMessage, "A problem occurred", {
                    positionClass: 'toast-top-center'
                });
            }
        };
        ;
        ClassroomModalService.prototype.openClassroomInviteModal = function (config) {
            var modalSettings = {
                controller: classroom_invite_modal_controller_1.ClassroomInviteModalController,
                controllerAs: "classroomInviteCtrl",
                templateUrl: "/templates/classrooms/teacher/modal/classroom-invite-modal.tpl",
                size: study_modal_service_1.StudyModalService.SIZE_MEDIUM,
                windowClass: "classroom-invite-modal",
                resolve: {
                    modalState: function () { return config.modalState; },
                    classroom: config.classroom,
                    emailAddresses: function () { return config.emailAddresses; }
                }
            };
            this.studyModalService.openModalByConfig(modalSettings);
        };
        ClassroomModalService.$inject = ["$q", "classroomService", "studyModalService", "CLASSROOM_NAME_MIN_LENGTH", "CLASSROOM_NAME_MAX_LENGTH"];
        return ClassroomModalService;
    }());
    exports.ClassroomModalService = ClassroomModalService;
    module.service("classroomModalService", ClassroomModalService);
});

//# sourceMappingURL=classroom-modal.service.js.map
